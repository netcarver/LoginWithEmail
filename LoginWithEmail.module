<?php namespace ProcessWire;

/**
 * ProcessWire 'Login With Email' module
 *
 * Hooks into Processwire login to allow login with user email address
 * 
 * See README file for further links regarding module development.
 * 
 * This file is licensed under the GNU license see
 * LICENSE
 * 
 * ProcessWire 3.x, Copyright 2017 by Noel Bossart
 * https://processwire.com
 *
 */

class LoginWithEmail extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Login With Email', 

			// version number 
			'version' => '0.0.1', 

			// summary is brief description of what this module is
			'summary' => 'Allows login with the user\'s email address.',
			
			// Optional URL to more information about the module
			'href' => 'https://github.com/noelboss/LoginWithEmail',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'cogs', 
			);
	}
	
	
	/**
	 * Called once only when installing the module.
	 *
	 * Creates a page for this process and a permission for the module.
	 *
	 * @access public
	 *
	 */
	public function ___install() {
		$this->session('Users can now login with their email.');
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {
		
		// change login name input label to e-mail-address
		wire()->addHookAfter('ProcessLogin::buildLoginForm', function(HookEvent $event) {
			$event->return->get('login_name')->set('label', $event->_('Username or email address'));
		});
		
		// hook into session::login to get user by mail
		// this works regardless of the name of the input field
		wire()->addHookBefore('Session::login', function(HookEvent $event) {
			
			// grab the login name from input (backend login) and check if mail
			$mail = wire('input')->post->email('login_name');
			
			// if not backendlogin its an api login, grab directly from arguments
			$mail = $mail ? $mail : $mail = wire('sanitizer')->email($event->arguments(0));
			
			// do something only if login is valid email (not username)
			if ($mail){
				// check if a user with the email exists
				$user = wire('users')->get('email='.$mail);
				
				// if valid user set login name argument
				if ($user->id) {
					$event->setArgument('name', $user->name);
				}
			}
		});
	}
}
